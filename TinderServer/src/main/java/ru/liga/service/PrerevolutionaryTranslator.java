package ru.liga.service;

import org.springframework.stereotype.Service;
import ru.liga.domain.Profile;

import java.util.Set;
import java.util.StringJoiner;

@Service
public class PrerevolutionaryTranslator {

    private static final Set<Character> VOWELS_LOWER = Set.of('а', 'е', 'ё', 'и', 'й', 'о', 'у', 'э', 'ю', 'я');

    private static final Set<Character> PUNCTUATIONS = Set.of('!', '?', ',', '.', '\"', '\'', ')', '<', '>');

    private static final Set<String> FITA_WORDS = Set.of("Агафья", "Анфим", "Афанасий", "Афина", "Варфоломей", "Голиаф",
            "Евфимий", "Марфа", "Матфей", "Мефодий", "Нафанаил", "Парфенон", "Пифагор", "Руфь", "Саваоф", "Тимофей",
            "Эсфирь", "Иудифь", "Фаддей", "Фекла", "Фемида", "Фемистокл", "Феодор", "Фёдор", "Федя", "Феодосий",
            "Федосий", "Феодосия", "Феодот", "Федот", "Феофан", "Феофил", "Ферапонт", "Фома", "Фоминична");

    private static final Set<String> SUBSTRINGS = Set.of("еда", "ем", "есть", "обед", "обедня", "сыроежка", "сыроега",
            "медведь", "снедь", "едкий", "ехать", "езда", "уезд", "еду", "ездить", "поезд", "бег", "беглец", "беженец",
            "забегаловка", "избегать", "избежать", "набег", "перебежчик", "пробег", "разбег", "убежище", "центробежная",
            "беда", "бедный", "победить", "убедить", "убеждение", "белый", "бельё", "белка", "бельмо", "белугабес",
            "бешеный", "обет", "обещать", "веять", "веер", "ветер", "ветвь", "веха", "ведать", "веди", "весть",
            "повесть", "ве́дение", "вежливый", "невежда", "веждывежа", "век", "вечный", "увечить", "веко", "венок",
            "венец", "веник", "вено", "вера", "вероятно", "суеверие", "вес", "вешать", "повеса", "равновесие", "звезда",
            "зверь", "невеста", "ответ", "совет", "привет", "завет", "вещать", "вече", "свежий", "свежеть", "свет",
            "свеча", "просвещение", "светец", "светёлка", "Светлана", "цвет", "цветы", "цвестичеловек", "человеческий",
            "деть", "девать", "одеть", "одевать", "одеяло", "одеяние", "дело", "делать", "действие", "неделя",
            "надеяться", "свидетель", "дева", "девочкадед", "делить", "предел", "дети", "детёныш", "детка", "детство",
            "зевать", "зев", "ротозей", "зело", "зеница", "зенки", "левый", "левша", "лезть", "лестница", "облезлый",
            "лекарь", "лечить", "лекарство", "лень", "ленивец", "ленивый", "лентяй", "лепота", "великолепный", "лепить",
            "нелепый", "слепок", "лес", "лесник", "лесничий", "лесопилка", "леший", "лето", "долголетие", "Летов",
            "летоисчисление", "летописец", "летопись", "малолетка", "однолетка", "пятилетка", "совершеннолетие", "леха",
            "бледный", "железо", "железняк", "калека", "калечить", "клеть", "клетка", "колено", "наколенник", "поколение",
            "лелеять", "млеть", "плен", "пленённый", "пленить", "пленник", "плесень", "плешь", "Плеханов", "полено",
            "след", "последователь", "последствие", "преследовать", "следить", "следопыт", "слепой", "телега", "тележный",
            "тлен", "тление", "тленный", "хлеб", "хлев", "медь", "медныймел", "менять", "изменник", "непременно", "мера",
            "намерение", "лицемер", "месяц", "месить", "мешать", "помеха", "место", "мещанин", "помещик", "наместник",
            "метить", "замечать", "примечание", "сметить", "смета", "мех", "мешок", "змей", "змея", "сметь", "смелый",
            "смеяться", "смех", "нега", "нежный", "нежить", "недра", "внедрить", "немой", "немец", "нет", "отнекаться",
            "гнев", "гнедой", "гнездо", "загнетка", "снег", "снежный", "мнение", "сомнение", "сомневаться", "петь",
            "песня", "петух", "пегий", "пена", "пенязь", "пестовать", "пестун", "пехота", "пеший", "опешить", "спеть",
            "спех", "спешить", "успех", "реять", "река", "речь", "наречие", "редкий", "редька", "резать", "резвый",
            "репа", "репица", "ресница", "обретать", "обрести", "сретение", "встречать", "прореха", "решето",
            "решётка", "решать", "решитьгрех", "грешный", "зреть", "созреть", "зрелый", "зрение", "крепкий",
            "крепиться", "орех", "преть", "прелый", "прение", "пресный", "свирепый", "свирель", "стрела", "стрелять",
            "стреха", "застреха", "хрен", "сусек", "сеять", "семясевер", "седло", "сесть", "беседа", "сосед", "седой",
            "седеть", "секу", "сечь", "сеча", "сечение", "просека", "насекомое", "сень", "осенять", "сенисено", "серый",
            "сера", "посетить", "посещать", "сетовать", "сеть", "сетка", "стена", "застенок", "застенчивый", "стенгазета",
            "тело", "мягкотелость", "растелешиться", "тельняшка", "тень", "оттенок", "тенёк", "тесто", "тесный", "стеснять",
            "стесняться", "теснить", "тесниться", "затеять", "затея", "утеха", "потеха", "тешить", "утешение", "хер",
            "похерить", "цевка", "цевье","цевница", "цедить", "целый", "исцелять", "целовать", "поцелуй", "цель",
            "целиться", "цена", "цепь", "цеплять", "цеп");


    public Profile translateProfile(Profile profile) {
        Profile result = new Profile();
        result.setId(profile.getId());
        result.setName(translate(profile.getName()));
        result.setDescription(translate(profile.getDescription()));
        result.setSexType(profile.getSexType());
        return result;
    }

    private String translate(String text) {
        StringJoiner stringJoiner = new StringJoiner(" ");
        String[] words = text.split("\\s");
        for (String word : words) {
            String changedWord = replaceI(addYer(replaceFinName(replaceE(word))));
            stringJoiner.add(changedWord);
        }
        return stringJoiner.toString();
    }

    private String replaceE(String word) {
        for (String sub: SUBSTRINGS) {
            if (word.toLowerCase().contains(sub)) {
                int startIndex = 0;
                if (word.charAt(0) != 'Е' && word.charAt(0) != 'е') {
                    startIndex = 1;
                }
                String subStringWithoutLastChar = sub.substring(startIndex, sub.length() - 1);
                return word.replace(subStringWithoutLastChar, subStringWithoutLastChar.replaceAll("е", "ѣ"));
            }
        }
        return word;
    }

    private String replaceFinName(String name) {
        if (FITA_WORDS.contains(name)) {
            return name.replaceAll("[фФ]", "ѳ");
        }
        return name;
    }

    private String addYer(String word) {
        int lastLetterIndex = word.length() - 1;
        if (PUNCTUATIONS.contains(word.charAt(lastLetterIndex))) {
            lastLetterIndex--;
        }
        if (!VOWELS_LOWER.contains(Character.toLowerCase(word.charAt(lastLetterIndex))) && word.charAt(lastLetterIndex) != 'ь') {
            return word.substring(0, lastLetterIndex + 1) + "ъ" + word.substring(lastLetterIndex + 1);
        }
        return word;
    }

    private String replaceI(String word) {
        char[] chars = word.toCharArray();
        for (int i = 0; i < chars.length - 1; i++) {
            if (VOWELS_LOWER.contains(Character.toLowerCase(chars[i + 1]))) {
                if (chars[i] == 'и') {
                    chars[i] = 'i';
                } else if (chars[i] == 'И') {
                    chars[i] = 'I';
                }
            }
        }
        return String.valueOf(chars);
    }
}
